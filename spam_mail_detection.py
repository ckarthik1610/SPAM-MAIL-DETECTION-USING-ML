# -*- coding: utf-8 -*-
"""SPAM MAIL DETECTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ThfEKz-neiv81JDn7hrrvZTgY7gd8Zp9

## **SPAM MAIL DETECTION SYSTEM**

**IMPORTING DEPENDENCIES**
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""**Accessing the CSV File**"""

raw_mail_data = pd.read_csv('/content/mail_data.csv')

# Raw Data
print(raw_mail_data)

"""**Filtering Null Datasets**"""

mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')
mail_data.head(21)

#Remaining Datasets after filtering Null datasets out
mail_data.shape

"""**Assigning Labels as 0 and 1**"""

mail_data.loc[mail_data['Category'] == 'spam', 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'Category',] = 1

#Seperating data as text and Label
X = mail_data['Message']
Y = mail_data['Category']

"""**Splitting Training and Testing Data (80/20)**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=5)

#Split
print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""**Extracting key features from the Text that can help differentiate a SPAM mail or a HAM mail**"""

# transform the text data to feature vectors that can be used as input to the Logistic regression

feature_extraction = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers

Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

"""**Displaying the numerical representation of the features in the training dataset**"""

print(X_train)

print(X_train_features)

"""**TRAINING THE LOGISTIC REGRESSION MODEL**"""

model = LogisticRegression()
model.fit(X_train_features, Y_train)

"""**EVALUATING THE MODEL**

Training Data
"""

# Prediction
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

# Accuracy
print('Accuracy on training data : ', accuracy_on_training_data)

"""Testing Data"""

# Prediction
prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)

# Accuracy
print('Accuracy on test data : ', accuracy_on_test_data)

"""**PREDICTION SYSTEM**"""

input_mail = ["There is a discount on Watermelon today"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')